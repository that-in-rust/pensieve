Standard operating procedure for Nov 2024

Stream A: Java backend roadmap

- Pick a topic in this order itself
- Open text file in cursor
- Spend 20 minutes minimum asking the following questions to cursor
    - What is this concept in ELI15
    - Give a simple runnable example of this concept in Java
    - Why was this concept needed in Java when this was designed as a language/framework feature
    - Do we have a similar concept in Rust
    - If Yes, then how is it different from Java concept
    - Give 1 simple runnable example of this concept in Rust
    - If no, then why did Rust not choose to implement this concept
    - What functional need does this concept fulfill in Java, and since it is not there in Rust how does Rust achieve the same functionality


Stream B: Tokio learning
- Everyday spend 20 minutes reading documentation & code of tokio & document each thing as a way to learn Rust programming via serendipity algorithm
    - Read the doc or code for 20 minutes
    - Document the key insights using cursor
    - Write 1 simple runnable example of this concept in Rust

Stream C: Serendipity projects learning
- Make notes on each project you learn with cursor, which you build on your own
    - ideas from self-experimentation
    - ideas from https://www.jointakeoff.com/dashboard/courses 
    - actively create 3 versions of Standard Operating Procedure for LLM assisted programming
        - pre-PRD work on domain knowledge
        - how to ensure LLM is logical enough by asking it to reason its architecture suggestions
        - how to ensure LLM is logical enough by asking it to reason its code suggestions

    

==========

Stream A: Topics list to cover in Nov 2024

==

Inversion of Control (IoC)
Dependency Injection (DI)
Aspect-Oriented Programming (AOP)
Spring MVC
Transaction Management
Data Access (JDBC and ORM)
Spring Boot
Spring Security
Spring Data
Spring Cloud
Spring Integration
Testing Support
Spring Reactive Programming (WebFlux)


Java Basics and Syntax
Variables, Data Types, and Operators: Learn about primitive types, reference types, and common operators.
Control Flow: Master conditional statements (if, switch) and loops (for, while, do-while).
Methods and Functions: Understand method syntax, return types, parameters, and overloading.

Rust Basics and Syntax
Variables and Types: Learn about type inference, mutability, primitive types, and compound types.
Control Flow: Master if/else expressions, match expressions, loops (loop, while, for).
Functions: Understand function syntax, return values, parameters, and closures.


Java Object-Oriented Programming (OOP)
Classes and Objects: Understand how to create classes and instantiate objects.
Inheritance: Learn about extending classes and the super keyword.
Polymorphism: Familiarize yourself with method overriding and interfaces.
Encapsulation: Use access modifiers (public, private, protected) and getter/setter methods.
Abstraction: Understand abstract classes and interfaces and when to use each.

Rust Type System and Traits
Structs and Enums: Learn about custom data types and pattern matching.
Traits: Understand trait bounds, trait objects, and default implementations.
Generics: Use generic type parameters and associated types.
Ownership: Master borrowing rules, lifetimes, and the borrow checker.
Modules: Use visibility rules and the module system for code organization.


Java Data Structures and Collections Framework
Arrays: Basics of arrays and multidimensional arrays.
Java Collections Framework: Learn about ArrayList, LinkedList, HashMap, HashSet, Queue, Stack, and TreeMap.
Generics: Type-safe handling of collections with generics (List<String> vs. List<Object>).

Rust Collections and Data Structures
Arrays and Vectors: Learn about fixed-size arrays and dynamic Vec<T>.
Standard Collections: Master HashMap, HashSet, BTreeMap, VecDeque.
Custom Collections: Implement collections with generics and traits.


========================================
Log update
========================================
 - 2024-11-05
    we are first going to learn language & framework basics in Java & Rust because without this we are not able to relate to the abstract concepts

